/* tslint:disable */
/* eslint-disable */
/**
 * DIXA API
 * Project DIXA API, documentation management
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20012 } from '../models';
import { InlineResponse20013 } from '../models';
import { InlineResponse400 } from '../models';
import { InlineResponse401 } from '../models';
import { InlineResponse403 } from '../models';
import { InlineResponse404 } from '../models';
import { InlineResponse422 } from '../models';
import { UserSharePermissionByDocument } from '../models';
/**
 * ShareDocumentUserApi - axios parameter creator
 * @export
 */
export const ShareDocumentUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Obtains a list of users with the permissions they have to access the consulted document
         * @summary List - Users
         * @param {number} documentId document id
         * @param {number} [departmentId] department id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (documentId: number, departmentId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            if (documentId === null || documentId === undefined) {
                throw new RequiredError('documentId','Required parameter documentId was null or undefined when calling listUsers.');
            }
            const localVarPath = `/share-documents/{document_id}/users`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (departmentId !== undefined) {
                localVarQueryParameter['department_id'] = departmentId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * save of list of users with the permissions they have to access the consulted document
         * @summary Save - Users of document share
         * @param {number} documentId document id
         * @param {UserSharePermissionByDocument} [body] Request in application/json format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsersOfDocument: async (documentId: number, body?: UserSharePermissionByDocument, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            if (documentId === null || documentId === undefined) {
                throw new RequiredError('documentId','Required parameter documentId was null or undefined when calling saveUsersOfDocument.');
            }
            const localVarPath = `/share-documents/{document_id}/users`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShareDocumentUserApi - functional programming interface
 * @export
 */
export const ShareDocumentUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Obtains a list of users with the permissions they have to access the consulted document
         * @summary List - Users
         * @param {number} documentId document id
         * @param {number} [departmentId] department id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(documentId: number, departmentId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await ShareDocumentUserApiAxiosParamCreator(configuration).listUsers(documentId, departmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * save of list of users with the permissions they have to access the consulted document
         * @summary Save - Users of document share
         * @param {number} documentId document id
         * @param {UserSharePermissionByDocument} [body] Request in application/json format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsersOfDocument(documentId: number, body?: UserSharePermissionByDocument, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await ShareDocumentUserApiAxiosParamCreator(configuration).saveUsersOfDocument(documentId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ShareDocumentUserApi - factory interface
 * @export
 */
export const ShareDocumentUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Obtains a list of users with the permissions they have to access the consulted document
         * @summary List - Users
         * @param {number} documentId document id
         * @param {number} [departmentId] department id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(documentId: number, departmentId?: number, options?: any): AxiosPromise<InlineResponse20012> {
            return ShareDocumentUserApiFp(configuration).listUsers(documentId, departmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * save of list of users with the permissions they have to access the consulted document
         * @summary Save - Users of document share
         * @param {number} documentId document id
         * @param {UserSharePermissionByDocument} [body] Request in application/json format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsersOfDocument(documentId: number, body?: UserSharePermissionByDocument, options?: any): AxiosPromise<InlineResponse20013> {
            return ShareDocumentUserApiFp(configuration).saveUsersOfDocument(documentId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShareDocumentUserApi - object-oriented interface
 * @export
 * @class ShareDocumentUserApi
 * @extends {BaseAPI}
 */
export class ShareDocumentUserApi extends BaseAPI {
    /**
     * Obtains a list of users with the permissions they have to access the consulted document
     * @summary List - Users
     * @param {number} documentId document id
     * @param {number} [departmentId] department id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareDocumentUserApi
     */
    public listUsers(documentId: number, departmentId?: number, options?: any) {
        return ShareDocumentUserApiFp(this.configuration).listUsers(documentId, departmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * save of list of users with the permissions they have to access the consulted document
     * @summary Save - Users of document share
     * @param {number} documentId document id
     * @param {UserSharePermissionByDocument} [body] Request in application/json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareDocumentUserApi
     */
    public saveUsersOfDocument(documentId: number, body?: UserSharePermissionByDocument, options?: any) {
        return ShareDocumentUserApiFp(this.configuration).saveUsersOfDocument(documentId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
