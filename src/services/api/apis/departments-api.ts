/* tslint:disable */
/* eslint-disable */
/**
 * DIXA API
 * Project DIXA API, documentation management
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2006 } from '../models';
import { InlineResponse2007 } from '../models';
import { InlineResponse400 } from '../models';
import { InlineResponse401 } from '../models';
import { InlineResponse403 } from '../models';
import { InlineResponse404 } from '../models';
import { InlineResponse422 } from '../models';
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the department in a single request
         * @summary Get - Department
         * @param {number} departmentId department id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartment: async (departmentId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new RequiredError('departmentId','Required parameter departmentId was null or undefined when calling getDepartment.');
            }
            const localVarPath = `/departments/{department_id}`
                .replace(`{${"department_id"}}`, encodeURIComponent(String(departmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of all departments in a single request
         * @summary List - Departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the department in a single request
         * @summary Get - Department
         * @param {number} departmentId department id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartment(departmentId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await DepartmentsApiAxiosParamCreator(configuration).getDepartment(departmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of all departments in a single request
         * @summary List - Departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await DepartmentsApiAxiosParamCreator(configuration).getDepartments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the department in a single request
         * @summary Get - Department
         * @param {number} departmentId department id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartment(departmentId: number, options?: any): AxiosPromise<InlineResponse2007> {
            return DepartmentsApiFp(configuration).getDepartment(departmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of all departments in a single request
         * @summary List - Departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartments(options?: any): AxiosPromise<InlineResponse2006> {
            return DepartmentsApiFp(configuration).getDepartments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
export class DepartmentsApi extends BaseAPI {
    /**
     * Get the department in a single request
     * @summary Get - Department
     * @param {number} departmentId department id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public getDepartment(departmentId: number, options?: any) {
        return DepartmentsApiFp(this.configuration).getDepartment(departmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of all departments in a single request
     * @summary List - Departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public getDepartments(options?: any) {
        return DepartmentsApiFp(this.configuration).getDepartments(options).then((request) => request(this.axios, this.basePath));
    }
}
