/* tslint:disable */
/* eslint-disable */
/**
 * DIXA API
 * Project DIXA API, documentation management
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DocumentIdRenameBody } from '../models';
import { InlineResponse20010 } from '../models';
import { InlineResponse2008 } from '../models';
import { InlineResponse2009 } from '../models';
import { InlineResponse400 } from '../models';
import { InlineResponse401 } from '../models';
import { InlineResponse403 } from '../models';
import { InlineResponse404 } from '../models';
import { InlineResponse422 } from '../models';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create a folder in the system
         * @summary Create - Folder
         * @param {string} [name] 
         * @param {number} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentFolder: async (name?: string, parentId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (parentId !== undefined) { 
                localVarFormParams.append('parent_id', parentId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * create a document in the system
         * @summary Create - File
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [minIdentifier] 
         * @param {string} [maxIdentifier] 
         * @param {string} [date] 
         * @param {string} [file] 
         * @param {number} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile: async (name?: string, description?: string, minIdentifier?: string, maxIdentifier?: string, date?: string, file?: string, parentId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }

            if (minIdentifier !== undefined) { 
                localVarFormParams.append('min_identifier', minIdentifier as any);
            }

            if (maxIdentifier !== undefined) { 
                localVarFormParams.append('max_identifier', maxIdentifier as any);
            }

            if (date !== undefined) { 
                localVarFormParams.append('date', date as any);
            }

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            if (parentId !== undefined) { 
                localVarFormParams.append('parent_id', parentId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the document in a single request
         * @summary Delete - Document
         * @param {number} documentId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument: async (documentId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            if (documentId === null || documentId === undefined) {
                throw new RequiredError('documentId','Required parameter documentId was null or undefined when calling deleteDocument.');
            }
            const localVarPath = `/documents/{document_id}`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the document in a single request
         * @summary Get - Document
         * @param {number} documentId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument: async (documentId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            if (documentId === null || documentId === undefined) {
                throw new RequiredError('documentId','Required parameter documentId was null or undefined when calling getDocument.');
            }
            const localVarPath = `/documents/{document_id}`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of all documents in a single request
         * @summary List - Documents
         * @param {number} [parent] (folder id) Value get files from parent folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments: async (parent?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Rename the document in a single request
         * @summary Rename - Document
         * @param {number} documentId document id
         * @param {DocumentIdRenameBody} [body] Request in format json format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameDocument: async (documentId: number, body?: DocumentIdRenameBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            if (documentId === null || documentId === undefined) {
                throw new RequiredError('documentId','Required parameter documentId was null or undefined when calling renameDocument.');
            }
            const localVarPath = `/documents/{document_id}/:rename`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * create a folder in the system
         * @summary Create - Folder
         * @param {string} [name] 
         * @param {number} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDocumentFolder(name?: string, parentId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).createDocumentFolder(name, parentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * create a document in the system
         * @summary Create - File
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [minIdentifier] 
         * @param {string} [maxIdentifier] 
         * @param {string} [date] 
         * @param {string} [file] 
         * @param {number} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFile(name?: string, description?: string, minIdentifier?: string, maxIdentifier?: string, date?: string, file?: string, parentId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).createFile(name, description, minIdentifier, maxIdentifier, date, file, parentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the document in a single request
         * @summary Delete - Document
         * @param {number} documentId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocument(documentId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).deleteDocument(documentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the document in a single request
         * @summary Get - Document
         * @param {number} documentId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocument(documentId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).getDocument(documentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of all documents in a single request
         * @summary List - Documents
         * @param {number} [parent] (folder id) Value get files from parent folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocuments(parent?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).getDocuments(parent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Rename the document in a single request
         * @summary Rename - Document
         * @param {number} documentId document id
         * @param {DocumentIdRenameBody} [body] Request in format json format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renameDocument(documentId: number, body?: DocumentIdRenameBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).renameDocument(documentId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * create a folder in the system
         * @summary Create - Folder
         * @param {string} [name] 
         * @param {number} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentFolder(name?: string, parentId?: number, options?: any): AxiosPromise<InlineResponse2009> {
            return DocumentsApiFp(configuration).createDocumentFolder(name, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * create a document in the system
         * @summary Create - File
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [minIdentifier] 
         * @param {string} [maxIdentifier] 
         * @param {string} [date] 
         * @param {string} [file] 
         * @param {number} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(name?: string, description?: string, minIdentifier?: string, maxIdentifier?: string, date?: string, file?: string, parentId?: number, options?: any): AxiosPromise<InlineResponse2009> {
            return DocumentsApiFp(configuration).createFile(name, description, minIdentifier, maxIdentifier, date, file, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the document in a single request
         * @summary Delete - Document
         * @param {number} documentId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument(documentId: number, options?: any): AxiosPromise<InlineResponse20010> {
            return DocumentsApiFp(configuration).deleteDocument(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the document in a single request
         * @summary Get - Document
         * @param {number} documentId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument(documentId: number, options?: any): AxiosPromise<InlineResponse2009> {
            return DocumentsApiFp(configuration).getDocument(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of all documents in a single request
         * @summary List - Documents
         * @param {number} [parent] (folder id) Value get files from parent folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(parent?: number, options?: any): AxiosPromise<InlineResponse2008> {
            return DocumentsApiFp(configuration).getDocuments(parent, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename the document in a single request
         * @summary Rename - Document
         * @param {number} documentId document id
         * @param {DocumentIdRenameBody} [body] Request in format json format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameDocument(documentId: number, body?: DocumentIdRenameBody, options?: any): AxiosPromise<InlineResponse2009> {
            return DocumentsApiFp(configuration).renameDocument(documentId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * create a folder in the system
     * @summary Create - Folder
     * @param {string} [name] 
     * @param {number} [parentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public createDocumentFolder(name?: string, parentId?: number, options?: any) {
        return DocumentsApiFp(this.configuration).createDocumentFolder(name, parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * create a document in the system
     * @summary Create - File
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [minIdentifier] 
     * @param {string} [maxIdentifier] 
     * @param {string} [date] 
     * @param {string} [file] 
     * @param {number} [parentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public createFile(name?: string, description?: string, minIdentifier?: string, maxIdentifier?: string, date?: string, file?: string, parentId?: number, options?: any) {
        return DocumentsApiFp(this.configuration).createFile(name, description, minIdentifier, maxIdentifier, date, file, parentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete the document in a single request
     * @summary Delete - Document
     * @param {number} documentId document id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public deleteDocument(documentId: number, options?: any) {
        return DocumentsApiFp(this.configuration).deleteDocument(documentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the document in a single request
     * @summary Get - Document
     * @param {number} documentId document id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getDocument(documentId: number, options?: any) {
        return DocumentsApiFp(this.configuration).getDocument(documentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of all documents in a single request
     * @summary List - Documents
     * @param {number} [parent] (folder id) Value get files from parent folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getDocuments(parent?: number, options?: any) {
        return DocumentsApiFp(this.configuration).getDocuments(parent, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rename the document in a single request
     * @summary Rename - Document
     * @param {number} documentId document id
     * @param {DocumentIdRenameBody} [body] Request in format json format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public renameDocument(documentId: number, body?: DocumentIdRenameBody, options?: any) {
        return DocumentsApiFp(this.configuration).renameDocument(documentId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
